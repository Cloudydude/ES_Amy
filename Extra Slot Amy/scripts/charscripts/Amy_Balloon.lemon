// Prevents Amy from dying at the beginning of the fight
//# address-hook(0x0162d8) end(0x016442)
function void fn0162d8()
{
	if (global.xtrachar != 3)
	{
		base.fn0162d8()
		return
	}

	objA0.position.x.u16 = camera.position.x.u16 + 0x40
	objA0.position.y.u16 = camera.position.y.u16 + 0x0100

	// // Amy
	A1 = 0xffffb000
	// if (s8[A1 + 0x04] >= 0)
	// {
	// 	objA1.position.x.u16 = objA0.position.x.u16
	// 	objA1.position.y.u16 = objA0.position.y.u16 - 1
	// 	u32[0xffffb000] = 0x01365c

	// 	// tails.ai_routine = 0x12
	// 	// tails.carrying = 0
	// 	// tails.catch_timeout = 0

	// // not sure if I need this?
	// #if STANDALONE
	// 	// This prevents a bug that makes Tails die just before the main boss fight starts
	// 	player1.control_override = 0
	// #endif
	// }

	// Balloon
	A2 = 0xffffb04a
	if (s8[A2 + 0x04] >= 0)
	{
		u16[A2 + 0x10] = u16[A1 + 0x14]
		u16[A2 + 0x14] = u16[A1 + 0x14] + camera.position.y.u16 // We don't want the balloon appearing out of thin air
		u32[0xffffb04a] = 0x01365c

		tails.ai_routine = 0x12
		tails.carrying = 0
		tails.catch_timeout = 0

	#if STANDALONE
		// This prevents a bug that makes Tails die just before the main boss fight starts
		player2.control_override = 0
	#endif
	}

	u16[A0 + 0x30] = 360
	objA0.update_address = 0x016334
	fn016334()
	// }
	// else
	// {
	// 	u16[A0 + 0x30] = 360
	// 	objA0.update_address = 0x0163f4
	// 	fn0163f4()
	// }
}

// Prevents Amy from constantly grabbing the balloon
function void Tails.CheckDropSonic()
{
	if (global.xtrachar != 3)
	{
		base.Tails.CheckDropSonic()
		return
	}
	Balloon.CheckDropAmy()
}

// Play pop sfx instead of hurt sfx
// Maybe there's a better way of doing this, idk?
function void playSound(u8 soundId)
{
	if (global.xtrachar == 3 && A0 == 0xffffb04a)
	{
		if (char.state == char.state.GOT_HURT && soundId == 0x35)
			soundId = 0x77
	}

	base.playSound(soundId)
}

function void Balloon.CheckDropAmy()
{
	if (tails.carrying && char.state == char.state.GOT_HURT)
	{
		A1 = 0xffffb000
	#if STANDALONE
		if (objA0.state == char.state.ROLLING)
			objA1.state = char.state.ROLLING		// Player 1 should also roll in this case
	#endif
		u8[A1 + 0x2e] = 0
		objA1.flags2a |= char.flag.IN_AIR
		tails.carrying = 0
		tails.catch_timeout = 0
	}
}

//# address-hook(0x014534) end(0x01459c)
function void Tails.CheckCatchSonic()
{
	if (global.xtrachar != 3)
	{
		base.Tails.CheckCatchSonic()
		return
	}

	// There's a timeout to consider
	if (u8[A2+1] != 0)
	{
		--u8[A2+1]
		if (u8[A2+1] != 0)
			return
	}

#if STANDALONE
	// No grabbing while player 1 presses down
	if (control.pad1.state & CONTROL_DOWN)
		return

	// Also no grabbing if player 1 is standing on the ground and Tails not manually controlled
	if ((u8[0xffffb000 + 0x2a] & char.flag.IN_AIR) == 0 && tails.control_counter == 0)
		return
#endif

	// The grab box
	u16 dx = objA1.position.x.u16 - char.position.x.u16 + 0x10
	u16 dy = objA1.position.y.u16 - char.position.y.u16 - 0x21 + ((global.inv_gravity) ? 0x28 : -0x28)
	if (dx < 0x20 && dy < 0x10)
	{
		if (u8[A1 + 0x05] < 0x04 && u8[A1 + 0x2e] == 0 && u8[A1 + 0x3d] == 0 && debug_mode.state == 0)
		{
			Balloon_hang()
			playSound(SFX_GRAB)
			u8[A2] = 1
		}
	}
}

function void Balloon_hang()
{
	// Set other character hanging onto Tails
	objA1.velocity.x = 0
	objA1.velocity.y = 0
	u16[A1 + 0x1c] = 0
	u16[A1 + 0x26] = 0
	objA1.position.x.u16 = char.position.x.u16
	objA1.position.y.u16 = char.position.y.u16 + 0x45
	objA1.state = char.state.SONIC_HANGON
	u8[A1 + 0x21] = 0
	u8[A1 + 0x24] = 0
	u8[A1 + 0x23] = 0
	u8[A1 + 0x2e] = 0x03
	objA1.flags2a &= ~(char.flag.FACING_LEFT | char.flag.CONTROL_LOCK)
	objA1.flags2a |= char.flag.IN_AIR
	u8[A1 + 0x3d] = 0
	objA1.render_flags &= ~(render_flag.FLIP_X | render_flag.FLIP_Y)
	D0.u8 = char.flags & char.flag.FACING_LEFT
	objA1.render_flags |= D0.u8
	objA1.flags2a |= D0.u8

	tails.carried_velocity_x = char.velocity.x
	tails.carried_velocity_y = char.velocity.y
	objA1.velocity.x = char.velocity.x
	objA1.velocity.y = char.velocity.y
	if (global.inv_gravity)
	{
		objA1.position.y.u16 -= 0x38
		objA1.render_flags ^= render_flag.FLIP_Y
	}
}

//# address-hook(0x0143ba) end(0x014520)
function void Tails.UpdateCarrySonic()
{
	if (global.xtrachar != 3)
	{
		base.Tails.UpdateCarrySonic()
		return
	}

	// In all known cases, A1 and A2 are the same here:
	//  A1 = 0xffffb000  -> Player 1 object address
	//  A2 = 0xfffff73e  -> Address of "tails.carrying"

	if (u8[A2] == 0)
	{
		// Not carrying: Check if close enough to grab player 1
		Tails.CheckCatchSonic()
		return
	}

	if (u8[A1 + 0x05] < 0x04)
	{
		if ((objA1.flags2a & char.flag.IN_AIR) && (objA1.velocity.x == tails.carried_velocity_x))
		{
			if (tails.carried_velocity_y != objA1.velocity.y)
			{
				u8[A1 + 0x40] = 0
				u8[A1 + 0x2e] = 0
				u8[A2] = 0
				u8[A2+1] = 60
				return
			}

			if (s8[A1 + 0x2e] < 0)
			{
				u8[A2] = 0
				u8[A2+1] = 60
				return
			}

			bool jumpOff = (D0.u8 & CONTROL_ABC) != 0
			u16 catchTimeout = 60
		#if STANDALONE
			if (jumpOff && Game.getSetting(SETTING_TAILS_ASSIST_MODE) >= 2)		// Hybrid & Mania style only
			{
				// Don't jump off unless Down is pressed as well
				jumpOff = ((D0.u16 >> 8) & CONTROL_DOWN) != 0

				// No catch timeout in Mania style, but holding Down will prevent the catch
				if (Game.getSetting(SETTING_TAILS_ASSIST_MODE) == 3)
					catchTimeout = 0
			}
		#endif
			if (!jumpOff)
			{
				bool IsLeft = (char.flags & char.flag.FACING_LEFT)
				objA1.position.x.u16 = char.position.x.u16 + ((IsLeft) ? -3 : 3)
				// Reposition Amy to grab the handle
				//objA1.position.y.u16 = char.position.y.u16 + (global.inv_gravity ? -0x1c : 0x1c)
				objA1.position.y.u16 = char.position.y.u16 + 0x29 + (global.inv_gravity ? -0x1c : 0x1c)

				objA1.render_flags &= ~(render_flag.FLIP_X | render_flag.FLIP_Y)
				objA1.flags2a &= ~char.flag.FACING_LEFT
				D0.u8 = char.flags & char.flag.FACING_LEFT
				objA1.render_flags |= D0.u8
				objA1.flags2a |= D0.u8
				if (global.inv_gravity)
					objA1.render_flags ^= render_flag.FLIP_Y

				--u8[A1 + 0x24]
				if (s8[A1 + 0x24] < 0)
				{
					u8[A1 + 0x24] = 0x0b
					D1 = u8[A1 + 0x23]
					D0.u8 = u8[0x014522 + D1.s16]
					if (D0.u8 == 0xff)
					{
						u8[A1 + 0x23] = 0
						D0.u8 = u8[0x014522]
					}
					else
					{
						++u8[A1 + 0x23]
					}
					u8[A1 + 0x22] = D0.u8
					D0 = u8[A1 + 0x22]

					u32 backupA2 = A2
					SetCharacterSpritePatterns()
					A2 = backupA2
				}

				s16[0xffffb000 + 0x18] = char.velocity.x
				s16[0xffffb000 + 0x1a] = char.velocity.y
				tails.carried_velocity_x = char.velocity.x
				tails.carried_velocity_y = char.velocity.y

				pushAll()
				A0 = 0xffffb000
				Character.CheckCollision()
				popAll()
			}
			else
			{
				// Jumping off
				u8[A1 + 0x2e] = 0
				u8[A2] = 0

				if (D0.u16 & 0x0f00)	// Any direction held?
				{
					u8[A2+1] = catchTimeout

					if (D0 & 0x0400)	// CONTROL_LEFT held
						objA1.velocity.x = -0x200
					if (D0 & 0x0800)	// CONTROL_RIGHT held
						objA1.velocity.x = 0x200
				}
				else
				{
					u8[A2+1] = 18
				}

				objA1.velocity.y = -0x480		// TODO: Should Knuckles have a different jump acceleration here?
				u8[A1 + 0x1e] = 0x0e
				u8[A1 + 0x1f] = 0x07
				u8[A1 + 0x20] = char.state.ROLLING
				objA1.flags2a |= (char.flag.IN_AIR | char.flag.ROLLING)
				objA1.flags2a &= ~char.flag.CONTROL_LOCK
				u8[A1 + 0x40] = 0x01

			#if STANDALONE
				playSound(SFX_JUMP)
			#endif
			}
			return
		}

		objA1.velocity.y = -0x100
		u8[A1 + 0x40] = 0
	}

	u8[A1 + 0x2e] = 0
	u8[A2] = 0
	u8[A2+1] = 60
}

//# address-hook(0x0148ac)
function void UpdateTailsFlight_innerB()
{
	if (global.xtrachar != 3)
	{
		base.UpdateTailsFlight_innerB()
		return
	}

	if (char.flags & char.flag.UNDERWATER)
	{
		// Swimming
		if (tails.flight_countdown == 0)
		{
			char.state = char.state.TAILS_SWIMTIRED
		}
		else if (tails.carrying)
		{
			char.state = char.state.TAILS_SWIMCARRY
		}
		else
		{
			char.state = (char.velocity.y < 0) ? char.state.TAILS_SWIMUP : char.state.TAILS_SWIMDOWN
		}
	}
	else
	{
		// Flying
		if (competition_mode.active)
		{
			char.state = char.state.TAILS_FLYDOWN
		}
		else
		{
			if (tails.flight_countdown == 0)
			{
				char.state = char.state.TAILS_FLYTIRED
			}
			else if (tails.carrying)
			{
				char.state = (char.velocity.y < 0) ? char.state.TAILS_CARRYUP : char.state.TAILS_CARRYDOWN
			}
			else
			{
				char.state = (char.velocity.y < 0) ? char.state.TAILS_FLYUP : char.state.TAILS_FLYDOWN
			}
		}

		// if (objA0.render_flags & render_flag.VISIBLE)
		// {
		// 	if (((level.framecounter.low + 8) & 0x0f) == 0)
		// 	{
		// 		playSound((char.state == char.state.TAILS_FLYTIRED) ? 0xbb : 0xba)
		// 	}
		// }
	}
}

//# address-hook(0x0140ce) end(0x014100)
function void fn0140ce()
{
	base.fn0140ce()
	// Adjusted hitboxes for balloon
	if (global.xtrachar == 3)
	{
		// Make sure the balloon reappears after popping
		objA0.render_flags |= render_flag.WORLD
		char.hitbox_extends.y = 11
		char.hitbox_extends.x = 10
	}
}

//# address-hook(0x010294) end(0x010364)
function void Character.GettingHurt()
{
	base.Character.GettingHurt()
	if (global.xtrachar == 3 && A0 == 0xffffb04a && !competition_mode.active)
	{
		bool isProtectedByObject = ((char.protection_flag & 0x80) != 0)
		if (!isProtectedByObject)
		{
			// Create falling balloon string object
			if (allocDynamicObjectStd())
			{
				objA1.update_address = 0x2042F0
				objA1.subtype2c = 0x01
				objA1.position.x.u16 = char.position.x.u16
				objA1.position.y.u16 = (char.position.y.u16 + 39)
				objA1.render_flags = (render_flag.WORLD | render_flag.VISIBLE)
				u16[A1 + 0x3e] = A0.u16
			}
		}
	}
}