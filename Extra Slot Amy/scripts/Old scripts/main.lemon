include palette
include rendering
include runfix
include customabilities
include nosuperflickies
include notails
// include signpost
include hammerspin
include physics
include ending
include deflectprojectile
include results
include titlescreen
include defineoptions


function void Slot3Char()
{
	global.characters = CHARS_TAILS_ALONE
}

function u64 getCharacterBonusTextIcon(u8 character)
{
	if (XtraChar == 3)
		return "hud_bonus_icon_slot3"
	else
		return base.getCharacterBonusTextIcon(character)
}

function u64 Slot3MonitorKeys(u8 type)
{
	if (type == 0)
		return "monitor_icon_static"
	else if (type == 0x01)
		return "monitor_icon_slot3"
	else if (type == 0x02)
		return "monitor_icon_robotnik"
	else if (type == 0x03)
		return "monitor_icon_ring"
	else if (type == 0x04)
		return "monitor_icon_speedshoes"
	else if (type == 0x05)
		return "monitor_icon_fireshield"
	else if (type == 0x06)
		return "monitor_icon_lightningshield"
	else if (type == 0x07)
		return "monitor_icon_bubbleshield"
	else if (type == 0x08)
		return "monitor_icon_invincibility"
	else if (type == 0x09)
		return "monitor_icon_super"
	else if (type == 0x0b)
		return "monitor_icon_classicshield"

	return 0
}

function bool XtraThreeHUD()
{
#if STANDALONE
	if (DEBUG_DISABLE_HUD)
		return false
#endif

	s16 baseX = global.level_started
	if (baseX < 0)
	{
		baseX += 8
		global.level_started = baseX
	}
	baseX += 0x0f
	s16 baseY = 0x08
	u16 renderQueue = 0xe000

	bool isBonusStage = (global.zone >= 0x13 && global.zone <= 0x15)
#if STANDALONE
	if (!debug_mode.state)
	{
		if (!isBonusStage)
		{
			// Score
			HUD.drawSprite("hud_text_score", baseX, baseY, renderQueue)
			++renderQueue
			HUD.drawNumber("hud_digit_%d", player.score * 10, baseX + 0x58, baseY, renderQueue)
			++renderQueue

			// // Continue hud mod
			// if (Renderer.hasCustomSprite("soniccont"))
			// {
			// 	u64 key = 0
			// 	if (Sprite_type == 0)
			// 		key = (MightyPalette == 0) ? "continue_icon_mighty" : (MightyPalette == 1) ? "continue_icon_segasonic" : (MightyPalette == 2) ? "continue_icon_chaotix" : (MightyPalette == 3) ? "continue_icon_mania" : "continue_icon_knuxred"
			// 	else
			// 		key = (MightyPalette == 0) ? "Cont_Ultimate_S3" : (MightyPalette == 1) ? "Cont_SegaSonic_S3" : (MightyPalette == 2) ? "Cont_Chaotix_S3" : (MightyPalette == 3) ? "Cont_Mania_S3" : "Cont_Knuxred_S3"

			// 	if (Mods.isModActive("Continues HUD"))
			// 	{
			// 		Renderer.drawCustomSprite(key, baseX + continueHUD.x - ((Sprite_type == 0) ? 12 : 11), continueHUD.y + ((Sprite_type == 0) ? 11 : 13), 0, SPRITE_FLAG_PRIO, 0xe000, 0,255)

			// 		if (continues_counter >= 10)
			// 		{
			// 			HUD.drawSmallDigit(u16((continues_counter / 10) % 10), baseX + continueHUD.x, continueHUD.y, 0xe000)
			// 			HUD.drawSmallDigit(u16(continues_counter % 10), baseX + continueHUD.x + 8, continueHUD.y, 0xe000)
			// 		}
			// 		else
			// 			HUD.drawSmallDigit(u16(continues_counter % 10), baseX + continueHUD.x, continueHUD.y, 0xe000)
			// 	}
			// 	else if (Mods.isModActive("Continues HUD Extra"))
			// 	{
			// 		u16 continuetick = 0
			// 		u16 continuemove = 0
			// 		u16 continuemove.y = ((Sprite_type == 0) ? -11 : -13)
			// 		while (continuetick < continues_counter)
			// 		{
			// 			Renderer.drawCustomSprite(key, baseX + continueHUD.x - ((Sprite_type == 0) ? 12 : 11) + continuemove, max(continueHUD.y - continuemove.y, 0), 0, SPRITE_FLAG_PRIO, 0xe000, 0,255)
			// 			continuemove += 21
			// 			++continuetick
			// 			if (continuemove > 370)
			// 			{
			// 				continuemove = 0
			// 				continuemove.y += 26
			// 			}
			// 		}
			// 	}
			// }

			// Time
			{
				bool show = (timer.minutes < 9 || isBonusStage || (level.framecounter & 0x08) || Game.getSetting(SETTING_INFINITE_TIME))
				HUD.drawSprite((show ? "hud_text_time" : "hud_text_time_red"), baseX, baseY + 0x10, renderQueue)
				++renderQueue

				// Unfortunately, the time progress is done later inside the frame, so we don't have the right value in "timer.frames" yet
				//  -> If the conditions for time progress are met, add one and everything will be alright
				u16 minutes = timer.minutes
				u16 seconds = timer.seconds
				u16 frames = timer.frames
				if (hud.dirty.timer && !global.game.paused && timer.alldata < 0x93b3b)	// That is 9:59 and 59 frames
				{
					++frames
					seconds += (frames / 60)
					minutes += (seconds / 60)
					frames %= 60
					seconds %= 60
				}
				u16 centiseconds = (frames * 99 + 30) / 59

				u16 px = (minutes >= 10) ? (baseX + 8) : baseX
				if (Game.getSetting(SETTING_EXTENDED_HUD))
				{
					if (minutes >= 10)
						HUD.drawDigit(minutes / 10, px + 0x20, baseY + 0x10, renderQueue)
					HUD.drawDigit(minutes % 10, px + 0x28, baseY + 0x10, renderQueue)
					HUD.drawSprite("hud_char_minutes", px + 0x30, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds / 10, px + 0x38, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds % 10, px + 0x40, baseY + 0x10, renderQueue)
					HUD.drawSprite("hud_char_seconds", px + 0x48, baseY + 0x10, renderQueue)
					HUD.drawDigit(centiseconds / 10, px + 0x50, baseY + 0x10, renderQueue)
					if (minutes < 10)
						HUD.drawDigit(centiseconds % 10, px + 0x58, baseY + 0x10, renderQueue)
				}
				else
				{
					if (minutes >= 10)
						HUD.drawDigit(minutes / 10, px + 0x20, baseY + 0x10, renderQueue)
					HUD.drawDigit(minutes % 10, px + 0x28, baseY + 0x10, renderQueue)
					HUD.drawSprite("hud_char_colon", px + 0x30, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds / 10, px + 0x38, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds % 10, px + 0x40, baseY + 0x10, renderQueue)
				}
				++renderQueue
			}
		}

		// Rings
		{
			u16 py = (isBonusStage) ? baseY : baseY + 0x20
			bool show = (ring_counter != 0 || (level.framecounter & 0x08))
			HUD.drawSprite((show ? "hud_text_rings" : "hud_text_rings_red"), baseX, py, renderQueue)
			++renderQueue

			u16 px = baseX + (!isBonusStage && Game.getSetting(SETTING_EXTENDED_HUD) ? 0x58 : 0x40)
			for (u32 value = ring_counter;;)
			{
				HUD.drawDigit(value % 10, px, py, renderQueue)
				px -= 8
				value /= 10
				if (value == 0)
					break
			}
			++renderQueue
		}

		// Lives (not visible in Time Attack)
		if (!Game.isTimeAttack() && !Game.getSetting(SETTING_INFINITE_LIVES))
		{
			bool useMobilePosition = HUD.useMobileLivesDisplay()
			u16 px = useMobilePosition ? (getScreenWidth() - baseX - 0x30) : baseX
			u16 py = useMobilePosition ? baseY : 200
			
			u64 characterName
			if (getMainCharacter() == CHARACTER_TAILS)
			{
				characterName = "slot3"
			}
			HUD.drawSprite(stringformat("hud_lives_icon_%s", characterName), px, py, renderQueue)
			++renderQueue

			if (lives_counter >= 10)
				HUD.drawSmallDigit(u16((lives_counter / 10) % 10), px + 0x20, py + 8, renderQueue)
			HUD.drawSmallDigit(u16(lives_counter % 10), px + 0x28, py + 8, renderQueue)
		}
	}
	else
#endif
	{
		D4 = (isBonusStage) ? 8 : 0

		if ((level.framecounter & 0x08) == 0)
		{
			if (ring_counter == 0)
			{
				D4 += 2
			}
			if (timer.minutes == 9 && !isBonusStage)
			{
				D4 += 4
			}
		}

		// Targets:
		//  - 0x00dbc2	-> D4.u16 = 0x00
		//  - 0x00dc00	-> D4.u16 = 0x02
		//  - 0x00dc32	-> D4.u16 = 0x04
		//  - 0x00dc96	-> D4.u16 = 0x08
		//  - 0x00dcb6	-> D4.u16 = 0x0a
		A1 = tableLookupAddress(0x00dbb6, D4.u16)

		D4.s16 = u16[A1] - 1
		D0.s16 = baseX + 0x80
		D1.u16 = 0x0108
		D5.u16 = 0x86ca
		A1 += 2
		if (D4.s16 >= 0)
		{
			writeToSpriteTable(renderQueue)
		}
	}

	//Because we want to disable the normal HUD, return true
	return true
}