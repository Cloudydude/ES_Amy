function bool isDAGarden()
{
	u64 key = stringformat("obj_dark_sand_pit_overlay_shallow184", 0)
	return (Renderer.hasCustomSprite(key)) ? true : false
}

// Don't load Sonic's intro for Amy
function bool isSonicIntro()
{
	if (global.xtrachar == 3)
		return false
	return base.isSonicIntro()
}

//# address-hook(0x0638a2) end(0x0638d6)
function void fn0638a2()
{
	if (global.xtrachar == 3 && isDAGarden() && !System.getGlobalVariableValueByName("original_mode"))
	{
		A1 = 0xffff0000 + u16[A0 + 0x44]
		if ((u8[A1 + 0x38] & 0x20) == 0)
			return

		u8[0xfffffab8] |= 0x04
		if (allocDynamicObjectStd())
		{
			objA1.update_address = 0x0639c8
		}
		copyMemory(0xfffffca0, 0x0a973c, 0x20)

		Object.TriggerUnloading()
	}
	else
	{
		base.fn0638a2()
		return
	}
}

// Knuckles intro for Amy
//# address-hook(0x063446) end(0x063460)
function void fn063446()
{
	if (global.xtrachar != 3)
	{
		base.fn063446()
		return
	}

	bool showKnucklesIntro = (checkpoint.number == 0)

	showKnucklesIntro &= (global.zone_act == 0x0000 && !Game.isTimeAttack() && !System.getGlobalVariableValueByName("original_mode"))

	if (DAGardenTimeAttackForAmy())
		showKnucklesIntro &= false

	if (showKnucklesIntro)
	{
		objA0.update_address = 0x063466
		fn063466()
	}
	else
	{
		UnloadObject()
	}
}


function void initializeMainGame()
{
	if (global.xtrachar != 3 || DAGardenTimeAttackForAmy() || System.getGlobalVariableValueByName("original_mode") || global.zone_act != 0x0000)
	{
		base.initializeMainGame()
		return
	}

	global.game_mode |= 0x80
	if (s16(global.rolling_demo) >= 0)
	{
		playSound(MUSIC_CTRL_FADEOUT)
	}
#if STANDALONE
	// Reset music tempo
	Standalone.setFastMusicFlag(FastMusicFlag.MUSIC_TEMPO, false)
	Standalone.setFastMusicFlag(FastMusicFlag.SUPER_THEME, false)

	// Just to be sure this is not active
	Game.endSkippableCutscene()

	Input.setTouchInputMode(TOUCH_INPUT_MODE_NORMAL_CONTROLS)

#if GAMEAPP
	Game.setUnderwaterAudioEffect(0)
#endif
#endif

	global.pause_disabled = 0
	kosinski.queue_size = 0
	zeroMemory(0xffffff10, 0x1b * 4)
	ClearPatternLoadingQueue()

	if (global.zone_act == 0x0d01)
	{
		FadeScreenToWhiteBlocking()

	#if STANDALONE
		// Avoid some black frames when screen should stay white
		VDP.Config.setActiveDisplay(false)
	#endif
	}
	else if (global.zone_act == 0x1701 && global.in_extra_stage != 0)
	{
		// Hidden Palace when entered through a giant ring
		FadeScreenToWhiteBlocking()

	#if STANDALONE
		// Avoid some black frames when screen should stay white
		VDP.Config.setActiveDisplay(false)
	#endif
	}
	else
	{
		FadeOutScreenBlocking()

	#if STANDALONE
		global.zone_act = Game.onFadedOutLoadingZone(global.zone_act)
	#endif
	}

	#if STANDALONE
	{
		Renderer.resetSprites()

		if (Game.isTimeAttack())
		{
			// Don't use "isMainCharacter" or similar here, it's not initialized yet
			if (global.zone_act == 0x0701 && levelselect.characters != CHARS_KNUCKLES_ALONE)
			{
				// MHZ 2: Start after the initial cutscene
				// TODO: The checkpoint number gets reset to 0 later in initialization again
				//     -> This is fine for Time Attack in MHZ 2, but not in other cases like Time Attack in SSZ
				checkpoint.number = 7
				checkpoint.x = 0x052a
				checkpoint.y = 0x05ac
			}
		}

		if (!Game.getSetting(SETTING_CONTINUE_MUSIC))
		{
			// Stop music
			Audio.stopChannel(0)
		}
	}
	#endif

	if (s16(global.rolling_demo) >= 0)
	{
	#if !STANDALONE
		set_status_register(0x2700)
	#endif
		fn0011ca()
	#if !STANDALONE
		set_status_register(0x2300)
	#endif

		level.framecounter = 0
		if (checkpoint.number != 0)
		{
			if (global.stage_type == 0)
			{
				global.zone_act = checkpoint.zone_act
				global.zone_act.apparent = checkpoint.zone_act.apparent
			}
			else
			{
				global.zone_act = level.backup.zone_act
				global.zone_act.apparent = u16[0xffffff9c]
			}
		}

		if (global.zone_act != 0x0401 || checkpoint.number != 6)
		{
			A2 = MainGame.getLevelDataPointer()
			D0 = u8[A2]
			if (D0.u8 != 0)
			{
				requestLoadingPatterns(D0.u8)
			}
		}

		SetGlobalCharacters()

		if (isSonicIntro())
		{
			D0 = 1
			FillPatternLoadingCues()

			requestLoadingPatterns(0x0a)
		}
		else if (competition_mode.active)
		{
			D0 = 6
			// Isn't requestLoadingPatterns missisng here?
		}
		else
		{
			if (isMainCharacter(CHARACTER_SONIC))		// Sonic
			{
				requestLoadingPatterns(0x01)
			}
			else if (isMainCharacter(CHARACTER_TAILS))	// Tails - or Miles
			{
				requestLoadingPatterns((global.region_code & 0x80) ? 0x07 : 0x52)
			}
			else 										// Must be Knuckles then
			{
				requestLoadingPatterns(0x05)
			}
		}
	}

	zeroMemory(0xffffac00, 0x400)
	zeroMemory(0xffffb000, 0x2000)
	zeroMemory(0xfffff628, 0x16 * 4)
	zeroMemory(0xfffff700, 0x100)
	zeroMemory(0xfffffe6e, 0x13 * 4)
	zeroMemory(0xfffffa80, 0x80)

	fn01aa6e()

	VDP.Config.setVerticalScrolling(false, 0xff)	// Good old horizontal scrolling mode
	VDP.Config.setNameTableBasePlaneA(0xc000)
	VDP.Config.setNameTableBasePlaneB(0xe000)
	VDP.Config.setSpriteAttributeTableBase(0xf800)
	VDP.Config.setPlayfieldSizeInPixels(512, 256)
	VDP.Config.enableHInt(false)
	VDP.Config.setupWindowPlane(false, 0)	// Disable window plane
	VDP.Config.setBackdropColor(0x20)
	VDP.Config.setRenderingModeConfiguration(false)

	if (debug_mode.unlocked && control.pad1.state & CONTROL_A)
	{
		debug_mode.enabled.u8 = true
	}

	if (competition_mode.active)
	{
		u16[0xfffffff6] = 0x4ef9		// Machine code for "jump"
		irq_table.lineupdate = 0x000d10

		VDP.Config.enableHInt(true)
		VDP.Config.setNameTableBasePlaneA(0x8000)
		VDP.Config.setNameTableBasePlaneB(0xa000)
		h_int.configuration = 0x8a6b	// H-INT at 0x6b = 107 (near the vertical screen center)

		if (global.zone == 0x0f)
			VDP.Config.setPlayfieldSizeInPixels(512, 512)
		else
			VDP.Config.setPlayfieldSizeInPixels(1024, 256)
	}
	else
	{
		h_int.configuration = 0x8aff
	}
	Renderer.configureHInt()

	u16[0xfffffb00] = 0
	u32[0xfffffbfc] = 0xfffffb00

	Level.loadPaletteData(isMainCharacter(CHARACTER_KNUCKLES) ? 5 : 3)
	Level.InitializeWater()

	zeroMemory(0xfffff0a0, 0x60)

	if (level.water_present)
	{
		VDP.Config.enableHInt(true)
	}

	if (s16(global.rolling_demo) >= 0)
	{
		bool isKnucklesIntro = (global.zone_act == 0x0000 && checkpoint.number == 0 && !Game.isTimeAttack())
	// 	bool isKnucklesIntro = (global.zone_act == 0x0700 && isMainCharacter(CHARACTER_KNUCKLES) && global.lock_on_state != 0 && checkpoint.number == 0)
	// #if STANDALONE
	// 	isKnucklesIntro = (Game.getSetting(SETTING_AIZ_INTRO_KNUCKLES) != 0 && global.zone_act == 0x0000 && isMainCharacter(CHARACTER_KNUCKLES) && checkpoint.number == 0 && !Game.isTimeAttack())
	// #endif

		u8 musicId
		if (global.zone_act == 0x0001 && checkpoint.number == 3)
		{
			musicId = MUSIC_AIZ1
			//base.initializeMainGame()
		}
		else if (isKnucklesIntro)
		{
			musicId = MUSIC_AIZ1
		}
		else
		{
		#if STANDALONE
			// Check if this is the S/T outro
			if (global.zone_act == 0x0d01)
			{
				playMusic(MUSIC_ENDING)		// Play Sonic 3 credits (instead of Sky Sanctuary)
			}
			else
			{
				// Bug fix for second parts of AIZ 1 and ICZ 1
				musicId = u8[0x005f82 + global.zone * 2 + global.act.apparent]
			}
		#else
			musicId = u8[0x005f82 + global.zone * 2 + global.act]
		#endif
		}

		level.default_music = musicId
		if (musicId != 0)
		{
			playMusic(musicId)
		}

		bool isAnyIntro = false
		if (global.zone_act == 0)
		{
			isAnyIntro = isSonicIntro()
		}
		if (isKnucklesIntro)
		{
			// This loads the critters graphics, though it does not seem to make a difference if this is done or not...
		#if !STANDALONE
			set_status_register(0x2700)
		#endif
			Nemesis.loadDataToVRAM(0x193308, 0xb000)
			Nemesis.loadDataToVRAM(0x1931D6, 0xb240)
			isAnyIntro = true
		}

		if (!isAnyIntro && global.zone_act != 0x1701 && !level.skip_titlecard)
		{
			// Spawn title card
			u32[0xffffb250] = 0x02d690

			while (true)
			{
				global.frame_state = 0x0c
				Kosinski.ProcessDecompressionQueue()
				waitForNextFrame()

				UpdateGameObjects()
				RenderSprites()
				LoadRequiredSpritePatterns()
				Kosinski.ProcessModules()
				if (u16[0xffffb298] == 0 && u32[0xfffff680] == 0)
					break
			}
		}

		level.skip_titlecard = false
	#if !STANDALONE
		set_status_register(0x2700)
	#endif
		ResetScoreDisplay()
	#if !STANDALONE
		set_status_register(0x2300)
	#endif
	}

	Level.loadNonfadingPaletteData(0x03)

	fn01bc60()

	UpdateCamera()
	fn007812()
	fn01c2b0()

#if !STANDALONE
	set_status_register(0x2700)
#endif
	InitLevelDisplay()
#if !STANDALONE
	set_status_register(0x2300)
#endif

	fn028c80()
	fn0076a6()
	UpdateWater()

	u16[0xffffff7c] = control.pad2
	control.player1 = 0
	control.tails = 0
	control.pad1 = 0
	control.pad2 = 0
	player1.control_override = 1
	player2.control_override = 1
	global.level_started = 0
	if (level.water_present && global.zone == 0x01)
	{
		u32[0xffffcf82] = 0x01f202
		u32[0xffffb172] = 0x0383bc		// HCZ run-on-water handler
		u8[0xffffb172 + 0x2c] = 1
	}
	else if (global.zone == 0x07)
	{
		u32[0xffffb128] = 0x03da00		// MHZ leaves effect
	}

	if (checkpoint.number == 0)
	{
		ring_counter = 0
		timer.alldata = 0
		extra_lives_granted = 0
		ring_counter.player2 = 0
		timer.alldata.player2 = 0
	#if STANDALONE
		if (!Game.getSetting(SETTING_MAINTAIN_SHIELDS))
	#endif
		{
			global.shields_backup_1 = 0
		}

		if (global.zone_act == 0x1600 || global.zone_act == 0x1700)
		{
			global.in_extra_stage = 0
		}
		else if (global.zone < 0x13 || (global.zone > 0x15 && global.zone_act != 0x1701))
		{
			global.shields_backup_2 = 0
			global.in_extra_stage = 0
		}
	}

	global.time_over = 0
	debug_mode.state = 0
	level.restart = 0
#if !STANDALONE
	unused.teleport_timer = 0
	unused.teleport_active = 0
#endif
	player.total_rings = 0
	unused.player2.total_rings = 0
	player.item_count = 0
	unused.player2.item_count = 0
	u16[0xfffffede] = 0
	u8[0xfffffe65] = 0
	super.active = 0
	ResetOscillatingNumbers()

	hud.dirty.score = 0x01
	hud.dirty.rings = 0x01
	hud.dirty.timer = 0x01
	global.level_started = 1

	if (global.zone_act == 0x0d01 || global.zone_act == 0x1701)
	{
		// Special handling for S/T Outro and HPZ emerald cave
		hud.dirty.timer = 0
		global.level_started = 0
	}

	fn0067ee()
	DynamicObjectsLoading()
	UpdateListOfRingsAround()

	fn01cacc()

	UpdateGameObjects()
	RenderSprites()
	LevelTilesAnimation()
	global.demo_countdown = 1800	// 30 seconds
	Level.InitializeWater.Part2()

	zeroMemory(0xfffff0a0, 0x60)

	player1.control_override = 0
	player2.control_override = 0
	fn0075d2()

#if STANDALONE
	// Just in case active display got disabled before (when entering Hidden Palace through a Giant Ring)
	VDP.Config.setActiveDisplay(true)
#endif
}

//# address-hook(0x063694) end(0x0636f2)
function void fn063694()
{
	// AIZ critters in Amy's intro
	if (global.xtrachar == 3)
	{
		s16[0x06370f] = 0x5000
		s16[0x063713] = -0x45FB
	}
	base.fn063694()
}

//Starting animation for levels
//# address-hook(0x0067ee) end(0x0069b6)
function void fn0067ee()
{
	if (global.xtrachar != 3)
	{
		base.fn0067ee()
		return
	}

	u32[0xffffb094] = 0x006c2c
	InitializeGameCharacters()
	RestoreShield()
	if (checkpoint.number != 0 || global.stage_type != 0)
		return

	A1 = 0xffffb000
	A2 = 0xffffb04a

	if (global.zone_act == 0x0000)
	{
	#if STANDALONE
		if (!Game.isTimeAttack() && !System.getGlobalVariableValueByName("original_mode"))
		{
			u32[0xffffb172] = 0x063446
		}
	#endif
	}
	else if (global.zone_act == 0x0300)
	{
		if (isDAGarden() && level.start_location == 2)
		{
			base.fn0067ee()
			return
		}
		u32[0xffffb04a] = 0x01365c
		u16[0xffffb04a + 0x10] = u16[0xffffb000 + 0x10]
		u16[0xffffb04a + 0x14] = u16[0xffffb000 + 0x14]
		tails.ai_routine = 0
	}
	else if (global.zone_act == 0x0700)
	{
		if (global.lock_on_state == 0)
		{
			u32[0xffffb04a] = 0x01365c
			u16[0xffffb04a + 0x10] = u16[0xffffb000 + 0x10]
			u16[0xffffb04a + 0x14] = u16[0xffffb000 + 0x14]
			tails.ai_routine = 0
		}
	}
	else
	{
		base.fn0067ee()
		return
	}
	// else if (global.zone_act == 0x0100)
	// {
	// 	// Hydrocity Zone
	// 	base.fn0067ee()
	// 	return
	// }
	// else if (global.zone_act == 0x0200)
	// {
	// 	// Marble Garden Zone
	// 	base.fn0067ee()
	// 	return
	// }
	// else if (global.zone_act == 0x0300)
	// {
	// 	// Carnival Night Zone
	// 	base.fn0067ee()
	// 	return
	// }
	// else if (global.zone_act == 0x0500)
	// {
	// 	// IceCap Zone
	// 	if (isMainCharacter(CHARACTER_SONIC))
	// 	{
	// 		u32[0xffffb172] = 0x0396e4
	// 	}
	// 	else if (isMainCharacter(CHARACTER_TAILS))
	// 	{
	// 		u32[0xffffb172] = 0x039b66
	// 	}
	// #if STANDALONE
	// 	else if (isMainCharacter(CHARACTER_KNUCKLES))
	// 	{
	// 		if (level.start_location == 1)
	// 		{
	// 			// Use Tails' start
	// 			u32[0xffffb172] = 0x039b66
	// 		}
	// 	}
	// #endif
	// }
	// else if (global.zone_act == 0x0600)
	// {
	// 	// Launch Base Zone
	// 	u32[0xffffb172] = 0x039a40
	// }
	// else if (global.zone_act == 0x0700)
	// {
	// 	// Mushroom Hill Zone
	// 	if (isMainCharacter(CHARACTER_KNUCKLES))
	// 	{
	// 		objA1.state = char.state.FALLING_PANIC
	// 		objA1.flags2a |= char.flag.IN_AIR
	// 	}
	// 	else if (global.lock_on_state == 0)
	// 	{
	// 		// Add Tails
	// 		if (global.characters == CHARS_SONIC_ALONE)
	// 		{
	// 			u32[0xffffb04a] = 0x01365c
	// 			u16[0xffffb04a + 0x10] = u16[0xffffb000 + 0x10]
	// 			u16[0xffffb04a + 0x14] = u16[0xffffb000 + 0x14]
	// 			tails.ai_routine = 0
	// 		}
	// 		else if (isMainCharacter(CHARACTER_TAILS))
	// 		{
	// 			tails.ai_routine = 0x20
	// 		}
	// 	}
	// }
	// else if (global.zone_act == 0x0800)
	// {
	// 	// Sandopolis Zone
	// 	u32[0xffffb172] = 0x041fee
	// 	objA1.state = char.state.ROLLING
	// 	objA1.flags2a |= char.flag.IN_AIR
	// 	if (u32[A2] != 0)
	// 	{
	// 		u8[A2 + 0x20] = char.state.ROLLING
	// 		u8[A2 + 0x2a] |= char.flag.IN_AIR
	// 	}
	// }
	// else if (global.zone_act == 0x0900)
	// {
	// 	// Lava Reef Zone
	// 	if (!isMainCharacter(CHARACTER_KNUCKLES))
	// 	{
	// 		objA1.state = char.state.FALLING_PANIC
	// 		objA1.flags2a |= char.flag.IN_AIR
	// 		if (u32[A2] != 0)
	// 		{
	// 			u8[A2 + 0x20] = char.state.FALLING_PANIC
	// 			u8[A2 + 0x2a] |= char.flag.IN_AIR
	// 		}
	// 	}
	// 	else
	// 	{
	// 		u32[0xffffb172] = 0x044a0c
	// 	}
	// }
	// else if (global.zone_act == 0x0b00)
	// {
	// 	// Death Egg Zone
	// 	u32[0xffffb172] = 0x044a0c
	// }
	// else if (global.zone_act == 0x1600)
	// {
	// 	// Lava Reef boss act
	// 	objA1.state = char.state.FALLING_PANIC
	// 	objA1.flags2a |= char.flag.IN_AIR
	// 	if (u32[A2] != 0)
	// 	{
	// 		u8[A2 + 0x20] = char.state.FALLING_PANIC
	// 		u8[A2 + 0x2a] |= char.flag.IN_AIR
	// 	}
	// }
	// else if (global.zone_act == 0x1601)
	// {
	// 	// Hidden Palace Zone
	// 	u32[0xffffb172] = 0x044a0c
	// }
}

//# address-hook(0x01be46) end(0x01bfae)
function void SetupCharacterAtStartPosition()
{
	if (global.xtrachar != 3)
	{
		base.SetupCharacterAtStartPosition()
		return
	}

	if (checkpoint.number != 0)
	{
		SetupCharacterAtLastCheckpoint()
		D1.u16 = u16[0xffffb000 + 0x10]
		D0.u16 = u16[0xffffb000 + 0x14]
	}
	else
	{
		A1 = (global.zone_act == 0x0000) ? 0x1e3cd8 : 0x1e3c18
		A1 += global.zone * 8 + global.act * 4
		D1 = u16[A1]
		D0 = u16[A1+2]
		u16[0xffffb000 + 0x10] = D1.u16
		u16[0xffffb000 + 0x14] = D0.u16

		if (global.zone_act == 0x0000)
		{
		#if STANDALONE
			if (!Game.isTimeAttack() && !System.getGlobalVariableValueByName("original_mode"))
			{
				// DA Garden AIZ starting position
				if (isDAGarden())
				{
					u16[0xffffb010] = 0x03b0
					u16[0xffffb014] = 0x0219
					D1.u16 = 0x02e8
					D0.u16 = 0x0190
					move_area.bottom.current = D0.u16
					move_area.bottom.target = D0.u16
				}
				else
				{
					// First set the desired camera position, then character position gets calculated after the if-else-blocks
					//  -> Camera positions here should be the same as in "fn0634ca"
					if (Game.getSetting(SETTING_LEVELLAYOUTS) == 2)
					{
						u16[0xffffb000 + 0x10] = 0x1830
						u16[0xffffb000 + 0x14] = 0x0119
						D1.u16 = 0x1768
						D0.u16 = 0x0090
						move_area.bottom.current = D0.u16
						move_area.bottom.target = D0.u16
					}
					else
					{
						D1.u16 = 0x1390
						D0.u16 = 0x0380
					}
				}
				D1.u16 += getScreenWidth() / 2
				D0.u16 += 96
			}
		#endif
		}
		else
		{
			base.SetupCharacterAtStartPosition()
			return
		}
	// 	else if (global.zone_act == 0x0300)
	// 	{
	// 		base.SetupCharacterAtStartPosition()
	// 		return
	// 	}
	// 	else if (global.zone_act == 0x0500)
	// 	{
	// 		if (isMainCharacter(CHARACTER_TAILS))
	// 		{
	// 			u16[0xffffb000 + 0x10] = 0x3780
	// 			u16[0xffffb000 + 0x14] = 0x01e0
	// 			camera.position.x.u16 = 0x36f0
	// 			camera.position.y.u16 = 0x0200
	// 			move_area.left  = 0x35a0
	// 			move_area.left.target = 0x35a0
	// 			move_area.left.player2 = 0x35a0
	// 			level.vertical_wrap = 0x0200
	// 			move_area.top.target = 0x0200
	// 			level.vertical_wrap.player2 = 0x0200
	// 			camera.position.x.u16.player2 = 0x36f0
	// 			camera.position.y.u16.player2 = 0x0200
	// 			return
	// 		}
	// 	#if STANDALONE
	// 		else if (isMainCharacter(CHARACTER_KNUCKLES))
	// 		{
	// 			if (level.start_location == 1)
	// 			{
	// 				// Use Tails' start
	// 				u16[0xffffb000 + 0x10] = 0x3780
	// 				u16[0xffffb000 + 0x14] = 0x01e0
	// 				camera.position.x.u16 = 0x36f0
	// 				camera.position.y.u16 = 0x0200
	// 				move_area.left  = 0x35a0
	// 				move_area.left.target = 0x35a0
	// 				move_area.left.player2 = 0x35a0
	// 				level.vertical_wrap = 0x0200
	// 				move_area.top.target = 0x0200
	// 				level.vertical_wrap.player2 = 0x0200
	// 				camera.position.x.u16.player2 = 0x36f0
	// 				camera.position.y.u16.player2 = 0x0200
	// 				return
	// 			}
	// 		}
	// 	#endif
	// 	}
	// #if STANDALONE
	// 	else if (global.zone_act == 0x0601)
	// 	{
	// 		if (isMainCharacter(CHARACTER_KNUCKLES) && getNumPlayers() == 2)
	// 		{
	// 			// Move Knuckles a bit to the right in LBZ 2 to make space for Tails
	// 			u16[0xffffb000 + 0x10] += 0x10
	// 			D1.u16 += 0x10
	// 		}
	// 	}
	// #endif
	// 	else if (global.zone_act == 0x0700)
	// 	{
	// 		if (!isMainCharacter(CHARACTER_KNUCKLES) && global.lock_on_state == 0)
	// 		{
	// 			move_area.left  = 0x00c0
	// 			move_area.left.target = 0x00c0
	// 			move_area.left.player2 = 0x00c0
	// 			D1.u16 = 0x0160
	// 		}
	// 	}
	// 	else if (global.zone_act == 0x0900)
	// 	{
	// 		if (isMainCharacter(CHARACTER_KNUCKLES))
	// 		{
	// 			D1.u16 += 0xb0
	// 		}
	// 	}
	// 	else if (global.zone_act == 0x0b00 || global.zone_act == 0x1601)
	// 	{
	// 		D1.u16 += 0xb0 + getScreenExtend()
	// 	}
	// #if STANDALONE
	// 	else if (global.zone == 0x13)
	// 	{
	// 		// Gumball Machine:
	// 		// Do not allow for jumping in first frame
	// 		u8[0xffffb000 + 0x20] = char.state.STANDING
	// 		u8[0xffffb000 + 0x2a] |= char.flag.IN_AIR
	// 		u8[0xffffb04a + 0x20] = char.state.STANDING
	// 		u8[0xffffb04a + 0x2a] |= char.flag.IN_AIR
	// 	}
	// 	else if (global.zone == 0x15)
	// 	{
	// 		// Slot Machine
	// 		D1.u16 -= getScreenExtend()
	// 	}
	// #endif
	}

	D1.s16 = max(D1.s16 - getScreenWidth() / 2, 0)
	if (competition_mode.active == 0)
	{
	#if STANDALONE
		// Avoid exact tile edges
		//  -> This was particularly added in to avoid glitches in first pixel row after exiting first Giant Ring in AIZ 2
		//     (There's probably a better solution, that generally solves this type of glitches when going left in AIZ 2)
		if ((D1.u16 & 0x0f) == 0)
			++D1.u16
	#endif
		D1.u16 = min(D1.u16, move_area.right)
	}

	camera.position.x.u16 = D1.u16
	camera.position.x.u16.player2 = D1.u16

	D0.s16 = clamp(D0.s16 - 96, 0, s16(move_area.bottom.current))
	camera.position.y.u16 = D0.u16
	camera.position.y.u16.player2 = D0.u16
}

//# address-hook(0x01c46e) end(0x01c4ce)
function void fn01c46e()
{
	// Makes sure the flowers in the DA Garden intro aren't numbers
	if (global.xtrachar == 3 && isDAGarden() && !System.getGlobalVariableValueByName("original_mode"))
	{
		move_area.left = 0x0200	// normally 0x1680. Going further left loads some art from the intro.
		move_area.bottom.target = (objA0.position.x.u16 < 0x04e0) ? 0x0190 : 0x02a0
		if (camera.position.x.u16 >= 0x1080)
			move_area.bottom.target = 0x01a0
		move_area.bottom.current = move_area.bottom.target
		
		// #if STANDALONE
		// 	// This serves as a small delay before Tails actually spawns
		// 	tails.respawn_counter = 60
		// #endif
		// tails.ai_routine = 0x02

		camera.update_routine += 2
		return
	}
	base.fn01c46e()
}

function bool DAGardenTimeAttackForAmy()
{
	return (isDAGarden() && System.getGlobalVariableValueByName("time_attack") != 0) ? true : false
}

//# address-hook(0x01c4d0) end(0x01c54e)
function void fn01c4d0()
{
	if (global.xtrachar != 3 || System.getGlobalVariableValueByName("original_mode"))
	{
		base.fn01c4d0()
		return
	}

	if (isDAGarden())
	{
		DAGar.fn01c4d0()
		return
	}

	move_area.left = 0x1308
#if STANDALONE
	// Show a bit more to the left, that looks better in widescreen
	move_area.left = max(0x12e0, move_area.left - getScreenExtend())
#endif

	if (camera.position.x.u16 >= 0x1400)
	{
	#if STANDALONE
		// This additional check here is just one of many changes to make the Sonic intro being skipped correctly in Time Attack
		if (!Game.isTimeAttack())
	#endif
		// if (checkpoint.number == 0 && isMainCharacter(CHARACTER_SONIC))
		// {
		// 	Kosinski.addToDecompressionQueue(0x3a458a, 0xffff9268)
		// 	Kosinski.addToDMAQueue(0x3a944e, 0x17c0)

		// 	u8[0xffffeec6] = 0xff
		// 	u16[0xfffff7f0] = 0x500
		// 	u16[0xfffff7f2] = 0x500
		// 	u16[0xfffff7f4] = 0x500
		// }

		// Switch to new checkpoint -- mainly for Sonic, so his intro gets skipped after death
		checkpoint.number = 1
		checkpoint.x = 0x13a0
		checkpoint.y = 0x041a
		Checkpoint.SaveCurrentState()

		checkpoint.time = 0
		// requestLoadingPatterns(0x08)
		camera.update_routine += 2
	}
}

function void DAGar.fn01c4d0()
{
	move_area.left = max(0x12e0, move_area.left - getScreenExtend())

	if (true)
	{
		move_area.left = 0x0200	// normally 0x1680. Going further left loads some art from the intro.
		move_area.bottom.target = (objA0.position.x.u16 < 0x04e0) ? 0x0190 : 0x02a0
		if (camera.position.x.u16 >= 0x1080)
			move_area.bottom.target = 0x01a0
		move_area.bottom.current = move_area.bottom.target
	}


	if (camera.position.x.u16 >= 0x1400)
	{
	#if STANDALONE
		// This additional check here is just one of many changes to make the Sonic intro being skipped correctly in Time Attack
		if (!Game.isTimeAttack())
	#endif

		// Switch to new checkpoint -- mainly for Sonic, so his intro gets skipped after death
		checkpoint.number = 1
		checkpoint.x = 0x13a0
		checkpoint.y = 0x041a
		Checkpoint.SaveCurrentState()

		checkpoint.time = 0
		requestLoadingPatterns(0x08)
		camera.update_routine += 2
	}
}

//# address-hook(0x0634ca) end(0x063524)
function void fn0634ca()
{
	base.fn0634ca()
	if (global.xtrachar == 3)
		objA0.countdown_value = 0x180 // Countdown before the bomb drops in
}


//# address-hook(0x0637ec) end(0x063840)
function void fn0637ec()
{
	base.fn0637ec()
	if (global.xtrachar == 3)
		objA0.countdown_value = 50 // Countdown before the bomb goes off
}

// Game starts at sea level
//# address-hook(0x04f906) end(0x04f90e)
function void InitLevelTiles.AIZ1()
{
	if (global.xtrachar != 3 || System.getGlobalVariableValueByName("original_mode"))
	{
		base.InitLevelTiles.AIZ1()
		return
	}

	if (isDAGarden())
	{
		DAGar.InitAIZact1Tiles()
		return
	}

	Init.Dwayne()

	//AIZ1.ChangeBackgroundForKnuckles()

	Level.GetCameraPosition()
	Level.InitialTilesFill()

#if STANDALONE
	// Update some chunks on the left of the start area that look broken
	// due with the border being a bit further left in S3AIR (see "fn01c4d0()")
	for (u32 i = 0; i < 7; ++i)
		u16[0xffff80ac + i * 0x61] = 0x64
#endif
}

global u16 cardposition_x
global u16 cardposition_y

// function u8 Randomnum(u8 min, u8 max)
// {
// 	u8 difference = ((max+1) - min) + min
// 	u8 Rand = ((System.rand() % difference))
// 	return (Rand)
// }

//# address-hook(0x063562) end(0x063588)
function void fn063562()
{
	base.fn063562()
	u16 offset_x = 0
	u16 offset_y = 0
	if (global.xtrachar == 3 && (u8[0xfffffab8] & 0x02) != 0)
	{
		for (u8 i = 0; i < 0x06; ++i)
		{
			if (allocDynamicObjectStd()) // Tarot cards
			{
				objA1.update_address = 0x2042F0
				objA1.sprite_priority = 0x080
				u8[A1 + 0x04] = (render_flag.WORLD)
				objA1.subtype2c = 0x06

				objA1.velocity.x = -0x100
				objA1.velocity.y = -0x150

				if (i == 1)
					offset_x = 4
				else if (i == 2)
					offset_x = -4
				else if (i == 3)
					offset_x = 10
				else if (i == 4)
					offset_y = 5
				else if (i == 5)
					offset_y = -3

				objA1.position.x.u16 = cardposition_x - offset_x
				objA1.position.y.u16 = cardposition_y - offset_y
			}
		}
	}
}

//Make sure the sky is behind the palm trees
//# address-hook(0x01c550) end(0x01c5c4)
function void fn01c550()
{
	if (global.xtrachar != 3 || isDAGarden())
	{
		base.fn01c550()
		return
	}

	A1 = 0x01c60a
	fn01caae()

	level.vertical_wrap = 0
	u16[0xfffffcde] = 0x20e
	if ((global.game_mode & 0x80) == 0 && global.fade_timer == 0)
	{
		u16[0xfffffc5e] = 0x020e
	}

	if (camera.position.x.u16 >= 0x2b00)
	{
		u16[0xfffffc5e] = 0x0004
	}
	if (camera.position.x.u16 >= 0x2c00)
	{
		level.vertical_wrap = 0x2e0
	}
	if (camera.position.x.u16 >= 0x2d80)
	{
		u16[0xfffffc5e] = 0x0c02
		move_area.left = 0x2d80
		requestLoadingPatterns(0x5a)
		camera.update_routine += 2
	}

#if STANDALONE
	// Handling for Knuckles' new path
	if (objA0.position.x.u16 < 0x1a00)
	{
		if (objA0.position.y.u16 < 0x0180)
		{
			move_area.left = 0x1680
			move_area.bottom.target = (objA0.position.x.u16 < 0x1960) ? 0x0090 : 0x0390
			move_area.bottom.current = move_area.bottom.target
		}
		else
		{
			move_area.left = 0x13a8
		}
	}
#endif
}

function void Init.Dwayne()
{
	if (allocDynamicObjectStd()) // Dwayne
    {
        objA1.update_address = 0x2042F0
		if (isDAGarden() && !System.getGlobalVariableValueByName("original_mode"))
		{
			objA1.position.x.u16 = 0x0366
			objA1.position.y.u16 = 0x0228
		}
		else if (Game.getSetting(SETTING_LEVELLAYOUTS) == 2)
		{
			objA1.position.x.u16 = 0x17e6
        	objA1.position.y.u16 = 0x0128
		}
		else
		{
			objA1.position.x.u16 = 0x13f5
			objA1.position.y.u16 = 0x0428
		}
		cardposition_x = objA1.position.x.u16
		cardposition_y = (objA1.position.y.u16 - 11)
        objA1.sprite_attributes = 0x04c4
		objA1.sprite_priority = 0x080
        u8[A1 + 0x04] = (render_flag.WORLD)
        objA1.subtype2c = 0x04

		objA1.hitbox_extends.x = 0x10
		objA1.hitbox_extends.y = 0x08
		objA1.box_size.x = 0x0e
		objA1.box_size.y = 0x08
    }
}


function void DAGar.InitAIZact1Tiles()
{
	Init.Dwayne()
	if (checkpoint.number == 0)
	{
		move_area.left = 0x0200	// normally 0x1680. Going further left loads some art from the intro.
		move_area.bottom.target = (objA0.position.x.u16 < 0x04e0) ? 0x0190 : 0x02a0
		move_area.bottom.current = move_area.bottom.target
	}

	Level.GetCameraPosition()
	Level.InitialTilesFill()
}

//# address-hook(0x04faec) end(0x04fb42)
function void InitLevelScrolling.AIZ1()
{
	if (global.xtrachar != 3 || !isDAGarden())
	{
		base.InitLevelScrolling.AIZ1()
		return
	}

	if (false)
	{
		zeroMemory(0xffffa800, 40)

		fn23afd2()
		fn04f2f6()
		Level.InitialTilesFill()

		A4 = 0x23b20a
		A5 = 0xffffa828
		fn04f0ce()
	}
	else
	{
		level.scrolling_routine = 8
		UpdateBackgroundScrolling.AIZ1()
		fn04f2f6()

		u32[0xffffa800] = 0
		u16[0xffffa806] = D2.u16
		A4 = 0x23b254
		A5 = 0xffffa800
		fn04ecec()

		UpdateForegroundScrolling.AIZ1()
	}
}

//# address-hook(0x01bc60) end(0x01bcc2)
function void fn01bc60()
{
	if (global.xtrachar != 3 || !isDAGarden())
	{
		base.fn01bc60()
		return
	}
	
	u8[0xffffee30] = 0
	u8[0xffffee08] = 0
	player1.camera_lock = 0
	player2.camera_lock = 0
	u8[0xffffee39] = 0
	camera.update_routine = 0
	outro.wait_time = 0
	u16[0xfffff662] = 0

	A0 = 0x01bcc6 + global.zone * 16 + global.act * 8
	u16 minX = u16[A0]
	u16 maxX = u16[A0+2]
	u16 minY = u16[A0+4]
	u16 maxY = u16[A0+6]
#if STANDALONE
	// Some corrections
	if (global.zone_act == 0x0000)	// AIZ 1 intro fix for Amy
	{
		minX = 0x12e0
		minX = 0x0200
	}
	else if (global.zone == 0x13)	// Gumball Machine bonus stage
	{
		minX -= getScreenExtend()
		maxX -= getScreenExtend()
	}
#endif

	move_area.left = minX
	move_area.right = maxX
	u16[0xffffee0c] = minX
	u16[0xffffee0e] = maxX
	u16[0xffffee1c] = minX
	u16[0xffffee1e] = maxX

	level.vertical_wrap = minY
	move_area.bottom.current = maxY
	u16[0xffffee10] = minY
	move_area.bottom.target = maxY
	u16[0xffffee20] = minY
	u16[0xffffee22] = maxY

	camera.yoffset.player = 0x60
	camera.yoffset.tails = 0x60
	u16[0xffffeea8] = 0xffff
	level.height.bitmask = 0xffff
	SetupCharacterAtStartPosition()
}

function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
	if (global.zone_act == 0x0000 && global.xtrachar == 3)
	{
		if (objA0.update_address == 0x074e24)
		{
			Renderer.drawCustomSprite("bomb_chute", px, py, 0x00, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
	}

	return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
}

// Thank you Hazel
//# address-hook(0x0639c8) end(0x063a10)
function void fn0639c8()
{
	if (global.xtrachar != 3)
	{
		base.fn0639c8()
		return
	}
	// init function for the egg robo
	// doesnt spawn the jetpack flames or leg objects though

	objA0.update_address = 0x063a16

	objA0.position.x.u16 = camera.position.x.u16 + 0x0110
	objA0.position.y.u16 = camera.position.y.u16 - 0x60
	playMusic(MUSIC_MAINBOSS)

	setupObjectAttributesFull(0x068146)
	
	objA0.sprite_attributes |= sprite_attribute.PRIORITY
	
	requestLoadingPatterns(0x7b) // load ship sprites
	objA0.animation.sprite = 0x0a // set the right ship sprite
	
	// spawn that small ship flame
	spawnChildObject(0x068062, 0x00, 30, 0)
	
	// spawn robotnik head
	spawnChildObject(0x067aca, 0x00, 0, -28)

	// Bomb chute
	spawnChildObject(0x074e12, 0x00, 0, 16)
}

//# address-hook(0x063a16) end(0x063a40)
function void fn063a16()
{
	if (global.xtrachar != 3)
	{
		base.fn063a16()
		return
	}
	// this function is only here because it originally called a function that messed
	// with animation.sprite, so it had to be removed.

	++objA0.position.y.u16
	D0.u16 = camera.position.y.u16 + 0x40
	if (D0.s16 < s16[A0 + 0x14])
	{
		objA0.update_address = 0x063a46
		objA0.countdown_value = 0x7f
		fn0685e2()
	}

	DrawObject()
}

//# address-hook(0x063a46) end(0x063a64)
function void fn063a46()
{
	if (global.xtrachar != 3)
	{
		base.fn063a46()
		return
	}

	--objA0.countdown_value
	if (objA0.countdown_value == 0)
	{
		objA0.velocity.x = 0x0400
		objA0.render_flags |= render_flag.FLIP_X
	}
	fn0847e6()
	UpdateMovementStraightSimple()
	
	DrawObject()
	
	if (objA0.position.x.u16 > camera.position.x.u16 + getScreenWidth() + 0x20)
	{
		objA0.flags38 |= 0x10 // this is needed to unload the robotnikhead object
		Object.TriggerUnloading() // this as well, it cannot be UnloadObject()
	}
}

// Amy reacts to the ground while walking in her intro
//# address-hook(0x063620) end(0x06364a)
function void fn063620()
{
	base.fn063620()
	if (global.xtrachar == 3)
	{
		CheckGroundCollision()
		objA0.position.y.u16 += (D1.s16 + 4)
	}
}